#!/usr/bin/python3
#+
# Render characters of text into words according to various phonetic
# alphabets <http://en.wikipedia.org/wiki/NATO_phonetic_alphabet>. Pass one
# or more words/phrases on the command line, and the rendition will be
# written to standard output. Optionally use the option “--alphabet=«alphabet»”
# to specify which alphabet to use, the default being NATO.
#
# This script only does the letters.
#
# Copyright 2011-2019 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under Creative Commons CC0 <https://creativecommons.org/publicdomain/zero/1.0/>.
#-

import sys
import getopt

default_letters = \
    (
        "alpha",
        "bravo",
        "charlie",
        "delta",
        "echo",
        "foxtrot",
        "golf",
        "hotel",
        "india",
        "juliet",
        "kilo",
        "lima",
        "mike",
        "november",
        "oscar",
        "papa",
        "quebec",
        "romeo",
        "sierra",
        "tango",
        "uniform",
        "victor",
        "whiskey",
        "xray",
        "yankee",
        "zulu",
    )
alphabets = {}
default = "nato"
for name, variation in \
    (
        ("nato", {}),
        ("icao", # original standard
            {
                "c" : "coca",
                "m" : "metro",
                "n" : "nectar",
                "u" : "union",
                "x" : "extra",
            }
        ),
        ("pakistan1",
            {"i" : "indigo"},
        ),
        ("pakistan2",
            {"i" : "italy"},
        ),
    ) \
:
    alphabets[name] = dict(zip((chr(c) for c in range(ord("a"), ord("z") + 1)), default_letters), **variation)
#end for
for name, letters, alternate in \
    (
        ("rn",
            (
                "apples",
                "butter",
                "charlie",
                "duff",
                "edward",
                "freddy",
                "george",
                "harry",
                "ink",
                "johnnie",
                "king",
                "london",
                "monkey",
                "nuts",
                "orange",
                "pudding",
                "queenie",
                "robert",
                "sugar",
                "tommy",
                "uncle",
                "vinegar",
                "willie",
                "xerxes",
                "yellow",
                "zebra",
            ),
            None,
        ),
        ("western_front",
            (
                "ack",
                "beer",
                "charlie",
                "don",
                "edward",
                "freddie",
                "gee",
                "harry",
                "ink",
                "johnnie",
                "king",
                "london",
                "emma",
                "nuts",
                "oranges",
                "pip",
                "queen",
                "robert",
                "esses",
                "toc",
                "uncle",
                "vic",
                "william",
                "x-ray",
                "yorker",
                "zebra",
            ),
            None,
        ),
        ("raf1",
            (
                "ace",
                "beer",
                "charlie",
                "don",
                "edward",
                "freddie",
                "george",
                "harry",
                "ink",
                "johnnie",
                "king",
                "london",
                "monkey",
                "nuts",
                "orange",
                "pip",
                "queen",
                "robert",
                "sugar",
                "toc",
                "uncle",
                "vic",
                "william",
                "x-ray",
                "yorker",
                "zebra",
            ),
            None,
        ),
        ("raf2",
            (
                "able",
                "baker",
                "charlie",
                "dog",
                "easy",
                "fox",
                "george",
                "how",
                "item",
                "jig",
                "king",
                "love",
                "mike",
                "nab",
                "oboe",
                "peter",
                "queen",
                "roger",
                "sugar",
                "tare",
                "uncle",
                "victor",
                "william",
                "x-ray",
                "yoke",
                "zebra",
            ),
            {
                "a" : "affirm",
                "i" : "interrogatory",
                "j" : "johnny",
                "n" : "negat",
                "p" : "prep",
            },
        ),
        ("us",
            (
                "able",
                "baker",
                "charlie",
                "dog",
                "easy",
                "fox",
                "george",
                "how",
                "item",
                "jig",
                "king",
                "love",
                "mike",
                "nan",
                "oboe",
                "peter",
                "queen",
                "roger",
                "sugar",
                "tare",
                "uncle",
                "victor",
                "william",
                "x-ray",
                "yoke",
                "zebra",
            ),
            None,
        ),
        ("ican", # International Commission for Air Navigation, pre-ICAO
            (
                "amsterdam",
                "baltimore",
                "casablanca",
                "denmark",
                "edison",
                "florida",
                "gallipoli",
                "havana",
                "italia",
                "jerusalem",
                "kilogramme",
                "liverpool",
                "madagascar",
                "new_york",
                "oslo",
                "paris",
                "quebec",
                "roma",
                "santiago",
                "tripoli",
                "upsala",
                "valencia",
                "washington",
                "xanthippe",
                "yokohama",
                "zurich",
            ),
            None,
        ),
    ) \
:
    assert len(letters) == 26
    alphabets[name + ("", "a")[alternate != None]] = dict(zip((chr(c) for c in range(ord("a"), ord("z") + 1)), letters))
    if alternate != None :
        alphabets[name + "b"] = dict(zip((chr(c) for c in range(ord("a"), ord("z") + 1)), letters), **alternate)
    #end if
#end for
alphabets["signalese"] = dict(alphabets["western_front"])
del name, variation, letters, alternate

#+
# Mainline
#-
listit = False
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["alphabet=", "list"]
  )
alphabet = default
for keyword, value in opts :
    if keyword == "--alphabet" :
        if value.lower() not in alphabets :
            raise getopt.GetoptError \
              (
                "no such alphabet “{}”, valid values are {}"
                .format(value, ", ".join(sorted("“{}”".format(k) for k in alphabets)))
              )
        #end if
        alphabet = value.lower()
    elif keyword == "--list" :
        listit = True
    #end if
#end for
letters = alphabets[alphabet]
if listit :
    sys.stdout.write("alphabet = {}\n".format(alphabet))
    max_name_len = max(len(n) for n in letters.values())
    for i in range(6) :
        for j in range(5) :
            ch = chr(i * 5 + j + ord("a"))
            if ch <= "z" :
                sys.stdout.write("  {} {:{}}".format(ch.upper(), letters[ch].upper(), max_name_len))
            #end if
        #end for
        sys.stdout.write("\n")
    #end for
#end if
for arg in args :
    first = True
    for ch in arg :
        if not first :
            sys.stdout.write(" ")
        #end if
        first = False
        if ch >= 'a' and ch <= 'z' :
            render = letters[ch]
        elif ch >= 'A' and ch <= 'Z' :
            render = letters[ch.lower()]
        else :
            render = ch
        #end if
        sys.stdout.write(render)
    #end for
    if not first :
        sys.stdout.write("\n")
    #end if
#end for
